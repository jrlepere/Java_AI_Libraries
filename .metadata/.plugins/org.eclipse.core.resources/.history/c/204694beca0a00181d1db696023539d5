package search;

import java.util.List;
import java.util.TreeMap;

import problem.Action;
import problem.State;

public class InformedSearchResult extends AResultObject {

	public InformedSearchResult(State initialState, Node goalNode, List<Action> actionSequence) {
		super(createMap(initialState, goalNode, actionSequence));
	}
	
	private static TreeMap<String, Object> createMap(State initialState, Node goalNode, List<Action> actionSequence) {
		TreeMap<String,Object> map = new TreeMap<>();
		map.put(INITIAL_STATE, initialState);
		map.put(GOAL_STATE, goalNode.getState());
		map.put(ACTIONS, actionSequence);
		map.put(COST, goalNode.getCost());
		map.put(DEPTH, goalNode.getDepth());
		return map;
	}
	
	public static final String INITIAL_STATE = "INITIAL_STATE";
	public static final String GOAL_STATE = "GOAL_STATE";
	public static final String ACTIONS = "ACTIONS";
	public static final String COST = "COST";
	public static final String DEPTH = "DEPTH";
	
	/**
	 * Creates a ResultObject
	 * @param initialNode the initial node
	 * @param goalNode the goal node
	 * @param actionSequence a list of actions to get from the goal node to the initial node
	 * @param numNodesGenerated the number of nodes generated
	 */
	public InformedSearchResult(Node initialNode, Node goalNode, List<Action> actionSequence, int numNodesGenerated) {
		this.init = initialNode;
		this.goal = goalNode;
		this.actions = actionSequence;
		this.nodesGenerated = numNodesGenerated;
	}
	
	/**
	 * Gets the initial state
	 * @return the initial state
	 */
	public State getInitialState() {
		return init.getState();
	}
	
	/**
	 * Gets the goal state
	 * @return the goal state
	 */
	public State getGoalState() {
		return goal.getState();
	}
	
	/**
	 * Gets the list of actions to get from the initial state to the goal state.
	 * @return
	 */
	public List<Action> getActionSequence() {
		return actions;
	}
	
	/**
	 * Gets the total cost of the path from initial state to goal state
	 * @return the total cost of the path 
	 */
	public int getTotalCost() {
		return goal.getCost();
	}
	
	/**
	 * Gets the total depth of the path from initial state to goal state
	 * @return the total depth of the path
	 */
	public int getTotalDepth() {
		return goal.getDepth();
	}
	
	
	private Node init;
	private Node goal;
	private List<Action> actions;
	private int nodesGenerated;
	
}
