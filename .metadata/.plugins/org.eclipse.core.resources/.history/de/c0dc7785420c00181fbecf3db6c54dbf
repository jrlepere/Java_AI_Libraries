import local_search.GeneticAlgorithmSearch.StateBitStreamConversion;
import problem.State;

public class NQueensStateBitStreamConverstion implements StateBitStreamConversion {

	public NQueensStateBitStreamConverstion(int n) {
		this.n = n;
	}
	
	public String getBitStream(State s) {
		int[] queenLocations = ((NQueensState) s).getQueenLocations();
		int maxBits = Integer.toBinaryString(queenLocations.length-1).length();
		String bitStream = "";
		for (int i = 0; i < queenLocations.length; i ++) {
			String bString = Integer.toBinaryString(i);
			for (int e = bString.length(); e < maxBits; e ++) {
				bString = "0" + bString;
			}
			bitStream = bitStream + bString;
		}
		return bitStream;
	}

	public State convertBitStream(String s) {
		int maxBits = Integer.toBinaryString(n-1).length();
		int[] queenLocations = new int[n];
		int queenLocation = 0;
		String bString = "";
		for (int i = 0; i < s.length(); i ++) {
			
		}
		return null;
	}
	
	private int n;

}
