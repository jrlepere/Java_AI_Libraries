package local_search;

import java.util.ArrayList;
import java.util.Random;

import problem.Problem;
import problem.State;
import search.IResultObject;
import search.LocalSearch;

public class GeneticAlgorithmSearch extends LocalSearch {

	public GeneticAlgorithmSearch(ObjectiveFunction fun, StateBitStreamConversion stateToBitStream, int populationSize, int mutateProbability, int fitnessGoal, int maxGenerations) {
		super(fun);
		this.stateToBitStream = stateToBitStream;
		this.populationSize = populationSize;
		this.mutateProbability = mutateProbability;
		this.fitnessGoal = fitnessGoal;
		this.maxGenerations = maxGenerations;
	}

	public IResultObject execute(Problem p) {
		
		// --- INITIALIZATION --- //
		Individual[] population = new Individual[populationSize];
		int[] populationRankings = new int[populationSize];
		int populationRankingsSum = 0;
		for (int i = 0; i < populationSize; i ++) {
			population[i] = new Individual(p.getInitialState());
			populationRankings[i] = rank;
			populationRankingsSum += rank;
		}
		
		int generations = 0;
		while (populationRankings[getFittestIndividualIndex(populationRankings)] >= fitnessGoal || generations >= maxGenerations) {
			State[] newPopulation = new State[populationSize];
			int[] newPopulationRankings = new int[populationSize];
			int newPopulationRankingsSum = 0;
			for (int i = 0; i < populationSize; i ++) {
				State parent1 = getParent(population, populationRankings, populationRankingsSum);
				State parent2 = getParent(population, populationRankings, populationRankingsSum);
				State child = breed(parent1, parent2);
				child = mutate(child);
				newPopulation[i] = child;
				newPopulationRankings[i] = function.execute(child);
				newPopulationRankingsSum += newPopulationRankings[i];
			}
			population = newPopulation;
			populationRankings = newPopulationRankings;
			populationRankingsSum = newPopulationRankingsSum;
			generations += 1;
		}
		
		return new LocalSearchResult(population[getFittestIndividualIndex(populationRankings)]);
	}
	
	/**
	 * Gets a parent for breeding.
	 * @param population the population
	 * @param populationRankings the values for each population 
	 * @param populationRankingsSum the sum of the population rankings
	 * @return a parent state for breeding
	 */
	private State getParent(State[] population, int[] populationRankings, int populationRankingsSum) {
		int p1_rand = gen.nextInt(populationRankingsSum);
		int c = 0;
		for (int i = 0; i < populationSize; i ++) {
			c += populationRankings[i];
			if (c > p1_rand) {
				return population[i];
			}
		}
		return null;
	}
	
	/**
	 * Generates an offspring from the parents.
	 * @param p1 the first parent
	 * @param p2 the second parent
	 * @return an offspring from the parents
	 */
	private State breed(State p1, State p2) {
		String p1BitStream = stateToBitStream.getBitStream(p1);
		String p2BitStream = stateToBitStream.getBitStream(p2);
		int crossPoint = gen.nextInt(p1BitStream.length());
		return stateToBitStream.convertBitStream(p1BitStream.substring(0, crossPoint) + p2BitStream.substring(crossPoint));
	}
	
	/**
	 * Mutates an individual.
	 * @param individual the individual to mutate
	 * @return the mutated individual
	 */
	private State mutate(State individual) {
		String bitStream = stateToBitStream.getBitStream(individual);
		String newBitStream = "";
		for (int i = 0; i < bitStream.length(); i ++) {
			int bit;
			if (i != bitStream.length() - 1) {
				bit = Integer.parseInt(bitStream.substring(i, i+1));
			} else {
				bit = Integer.parseInt(bitStream.substring(i));
			}
			if (gen.nextDouble() < mutateProbability) {
				bit = (bit + 1) % 2;
			}
			newBitStream += bit;
		}
		return stateToBitStream.convertBitStream(newBitStream);
	}
	
	private int getFittestIndividualIndex(int[] populationRankings) {
		int bestIndex = 0;
		for (int i = 1; i < populationRankings.length; i ++) {
			if (populationRankings[i] > populationRankings[bestIndex]) {
				bestIndex = i;
			}
		}
		return bestIndex;
	}
	
	private class Individual {
		public Individual(State s) {
			this.s = s;
			this.fitnessScore = function.execute(s);
		}
		private State s;
		private int fitnessScore;
	}
	
	private class Population {
		public Population(int populationSize) {
			this.population = new Individual[populationSize];
			this.currentSize = 0;
			this.totalFitnessScore = 0;
		}
		public void addIndividual(Individual i) {
			population[currentSize] = i;
			currentSize += 1;
			totalFitnessScore = i.fitnessScore;
		}
		private Individual[] population;
		private int currentSize;
		private int totalFitnessScore;
	}
	
	/**
	 * An interface to define state and bit stream conversion required for the genetics algorithms
	 * @author JLepere2
	 * @date 02/07/2018
	 */
	public interface StateBitStreamConversion {
		/**
		 * Converts a state to a string of bits.
		 * @param s the state
		 * @return a string of bits
		 */
		public String getBitStream(State s);
		/**
		 * Converts a string of bits to a state.
		 * @param s the string of bits
		 * @return a state
		 */
		public State convertBitStream(String s);
	}
	
	private StateBitStreamConversion stateToBitStream;
	private int populationSize;
	private int mutateProbability;
	private int fitnessGoal;
	private int maxGenerations;
	Random gen = new Random();

}
