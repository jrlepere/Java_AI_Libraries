import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import csp.CSP;
import csp.Constraint;

/**
 * Problem definition for Sudoku
 * @author JLepere2
 *
 */
public class SudokuProblem implements CSP<SudokuVariable, SudokuDomain, Integer> {

	public SudokuProblem() {
		
		// -- INITIAL CONFIGURATION -- //
		int[][] sudokuBoard = new int[9][9];
		sudokuBoard[0] = new int[]{0,0,0,2,6,0,7,0,1};
		sudokuBoard[1] = new int[]{6,8,0,0,7,0,0,9,0};
		sudokuBoard[2] = new int[]{1,9,0,0,0,4,5,0,0};
		sudokuBoard[3] = new int[]{8,2,0,1,0,0,0,4,0};
		sudokuBoard[4] = new int[]{0,0,4,6,0,2,9,0,0};
		sudokuBoard[5] = new int[]{0,5,0,0,0,3,0,2,8};
		sudokuBoard[6] = new int[]{0,0,9,3,0,0,0,7,4};
		sudokuBoard[7] = new int[]{0,4,0,0,5,0,0,3,6};
		sudokuBoard[8] = new int[]{7,0,3,0,1,8,0,0,0};
		
		// -- CONSTRAINT HOLDERS -- //
		ArrayList<List<SudokuVariable>> rows = new ArrayList<>(); 
		ArrayList<List<SudokuVariable>> cols = new ArrayList<>();
		ArrayList<List<SudokuVariable>> squares = new ArrayList<>();
		for (int i = 0; i < 9; i ++) {
			rows.add(new LinkedList<>());
			cols.add(new LinkedList<>());
			squares.add(new LinkedList<>());
		}
		
		// -- ASSIGN VARIABLES AND CREATE CONSTRAINTS -- //
		this.variables = new LinkedList<>();
		for (int row = 0; row < 9; row ++) {
			for (int col = 0; col < 9; col ++) {
				SudokuVariable sv = new SudokuVariable();
				if (sudokuBoard[row][col] != 0) sv.assign(sudokuBoard[row][col]);
				rows.get(row).add(sv);
				cols.get(col).add(sv);
				squares.get(3 * (row / 3) + (col / 3)).add(sv);
				variables.add(sv);
			}
		}
		
		// -- ADD CONSTRAINTS -- //
		constraints = new LinkedList<>();
		for (int i = 0; i < 9; i ++) {
			constraints.add(new SudokuConstraint(rows.get(i)));
			constraints.add(new SudokuConstraint(cols.get(i)));
			constraints.add(new SudokuConstraint(squares.get(i)));
		}
	}
	
	public List<SudokuVariable> getVariables() {
		return variables;
	}

	public List<Constraint> getConstraints() {
		return constraints;
	}
	
	private List<SudokuVariable> variables;
	private List<Constraint> constraints;

}
