import games.State;

public class Board implements State {
	
	public Board(Symbol[][] board) {
		this.board = board;
		
		setTerminality();
		
		
	}
	
	public Symbol[][] getBoard() {
		return board;
	}
	
	public static Board getInitialBoard() {
		Symbol[][] board = new Symbol[Board.BOARD_SIZE][Board.BOARD_SIZE];
		for (int i = 0; i < Board.BOARD_SIZE; i ++) {
			for (int j = 0; j < Board.BOARD_SIZE; j ++) {
				board[i][j] = Symbol.B;
			}
		}
		return new Board(board);
	}
	
	private void setTerminality() {
		// ROW TEST
		if (board[0][0] != Symbol.B && (board[0][0].equals(board[0][1]) && board[0][1].equals(board[0][2]))) setTerminalityHelper(board[0][0]);
		else if (board[1][0] != Symbol.B && (board[1][0].equals(board[1][1]) && board[1][1].equals(board[1][2]))) setTerminalityHelper(board[1][0]);
		else if (board[2][0] != Symbol.B && (board[2][0].equals(board[2][1]) && board[2][1].equals(board[2][2]))) setTerminalityHelper(board[2][0]);
		// COL TEST
		else if (board[0][0] != Symbol.B && (board[0][0].equals(board[1][0]) && board[1][0].equals(board[2][0]))) setTerminalityHelper(board[0][0]);
		else if (board[0][1] != Symbol.B && (board[0][1].equals(board[1][1]) && board[1][1].equals(board[2][1]))) setTerminalityHelper(board[0][1]);
		else if (board[0][2] != Symbol.B && (board[0][2].equals(board[1][2]) && board[1][2].equals(board[2][2]))) setTerminalityHelper(board[0][2]);
		// Diagonal Test
		else if (board[0][0] != Symbol.B && (board[0][0].equals(board[1][1]) && board[1][1].equals(board[2][2]))) setTerminalityHelper(board[0][0]);
		else if (board[0][2] != Symbol.B && (board[0][2].equals(board[1][1]) && board[1][1].equals(board[2][0]))) setTerminalityHelper(board[0][2]);
		// Complete Board
		else if (board[0][0] == Symbol.B) return;
		else if (board[0][1] == Symbol.B) return;
		else if (board[0][2] == Symbol.B) return;
		else if (board[1][0] == Symbol.B) return;
		else if (board[1][1] == Symbol.B) return;
		else if (board[1][2] == Symbol.B) return;
		else if (board[2][0] == Symbol.B) return;
		else if (board[2][1] == Symbol.B) return;
		else if (board[2][2] == Symbol.B) return;
		else 
	}
	
	private void setTerminalityHelper(Symbol winner){
		isTerminal = true;
		this.winner = winner;
	}
	
	private Symbol[][] board;
	private boolean isTerminal;
	private int utility;
	public static final int BOARD_SIZE = 3;
	
}
