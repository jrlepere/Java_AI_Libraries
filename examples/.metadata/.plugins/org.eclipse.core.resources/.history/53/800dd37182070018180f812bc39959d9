
import problem.Action;
import problem.State;

public class EightPuzzleAction implements Action {

	public boolean canExecute(State arg0) {
		return false;
	}

    public State execute(State s) {
    	s = (EightPuzzleState) s;
        int[] tileLocations = new int[s.getTileLocations().length];
        System.arraycopy(s.getTileLocations(), 0, tileLocations, 0, tileLocations.length);
        int blankTileLocation = s.getBlankTileLocation();
        if (direction == Direction.UP) {
                if (blankTileLocation < 3) {
                        return null;
                }
                return new State(swap(tileLocations, blankTileLocation, blankTileLocation - 3));
        }   
        if (direction == Direction.RIGHT) {
                if ((blankTileLocation + 1) % 3 == 0) {
                        return null;
                }   
                return new State(swap(tileLocations, blankTileLocation, blankTileLocation + 1));
        }   
        if (direction == Direction.DOWN) {
                if (blankTileLocation > 5) {
                        return null;
                }   
                return new State(swap(tileLocations, blankTileLocation, blankTileLocation + 3));
        }   
        if (direction == Direction.LEFT) {
                if (blankTileLocation % 3 == 0) {
                        return null;
                }   
                return new State(swap(tileLocations, blankTileLocation, blankTileLocation - 1));
        }   
        return null;
}  

    /** 
     * Swaps the tiles and returns a new tile locations array.
     * @param tileLocations the original tile locations.
     * @param i index i
     * @param j index j
     * @return a new tile locations array
     */
    private int[] swap(int[] tileLocations, int i, int j) {
        int helper = tileLocations[i];
        tileLocations[i] = tileLocations[j];
        tileLocations[j] = helper;
        return tileLocations;
    }   

    public int getCost() {
            return 1;
    }   

    public String toString() {
        return direction.name();
    }   

    private Direction direction;

}
