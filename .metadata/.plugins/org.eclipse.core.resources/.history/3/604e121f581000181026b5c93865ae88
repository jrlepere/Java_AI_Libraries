package csp_search;

import java.util.LinkedList;
import java.util.List;

import csp.CSP;
import csp.Constraint;
import csp.Domain;
import csp.Variable;
import search.IResultObject;

public class CSPBacktrackingSearch<X extends Variable<D,V>, D extends Domain<V>, V> implements ICSPSearch<X,D,V> {

	public CSPBacktrackingSearch(SelectUnassignedVariable<X, D, V> suv) {
		this.suv = suv;
	}
	
	public IResultObject execute(CSP<X, D, V> p) {
		return backtrack(p.getAssignment(), p);
	}
	
	public IResultObject backtrack(List<X> assignment, CSP<X, D, V> csp) {
		if (assignmentIsComplete(assignment)) return new CSPResultObject<X>(assignment);
		X x = suv.getVariableForAssignment(assignment, csp);
		if (x == null) return null;
		for (V v : x.getDomain().getValues()) {
			x.assign(v);
			List<Inference<X, V>> inferences = inference(csp, x, assignment);
			for (Inference<X, V> i : inferences) {
				assignment.get(assignment.indexOf(i.getVar())).getDomain().getValues().remove(i.getValue());
			}
			if (assignmentIsValid(csp)) {
				IResultObject res = backtrack(assignment, csp);
				if (res != null) {
					return res;
				}
			}
			x.assign(null);
			for (Inference<X, V> i : inferences) {
				assignment.get(assignment.indexOf(i.getVar())).getDomain().getValues().add(i.getValue());
			}
		}
		return null;
	}
	
	private boolean assignmentIsValid(CSP<X, D, V> csp) {
		for (Constraint<X> c : csp.getConstraints()) {
			if (c.isViolation()) return false;
		}
		return true;
	}
	
	private boolean assignmentIsComplete(List<X> assignment) {
		for (X x : assignment) {
			if (!x.isAssigned()) return false;
		}
		return true;
	}
	
	private List<Inference<X, V>> inference(CSP<X, D, V> p, X var, List<X> assignment) {
		List<Inference<X, V>> inferences = new LinkedList<>();
		for (Constraint<X> c : p.getConstraints()) {
			if (c.getConstrainedVariables().contains(var)) {
				for (X x : c.getConstrainedVariables()) {
					if (x.isAssigned()) continue;
					if (x.equals(var)) continue;
					inferences.add(new Inference<X, V>(x, var.getAssignment()));
				}
			}
		}
		return inferences;
	}
	
	private SelectUnassignedVariable<X, D, V> suv;

}
