package local_search;

import java.util.Random;

import problem.Problem;
import problem.State;
import search.IResultObject;
import search.LocalSearch;

public class GeneticAlgorithmSearch extends LocalSearch {

	public GeneticAlgorithmSearch(ObjectiveFunction fun, Mutation mutation, int populationSize) {
		super(fun);
		this.mutation = mutation;
		this.populationSize = populationSize;
	}

	public IResultObject execute(Problem p) {
		// --- INITIALIZATION --- //
		State[] population = new State[populationSize];
		int[] populationRankings = new int[populationSize];
		int populationRankingsSum = 0;
		for (int i = 0; i < populationSize; i ++) {
			population[i] = p.getInitialState();
			int rank = function.execute(population[i]);
			populationRankings[i] = rank;
			populationRankingsSum += rank;
		}
		
		// --- SELECTION --- //
		State[] newPopulation = new State[populationSize];
		for (int i = 0; i < populationSize/2; i ++) {
			State p1 = null;
			State p2 = null;
			int p1_rand = gen.nextInt(populationRankingsSum);
			int p2_rand = gen.nextInt(populationRankingsSum);
			int c = 0;
			for (int r = 0; r < populationSize; r ++) {
				c += populationRankings[r];
				if (c > p1_rand) {
					p1 = population[r];
				}
			}
			for (int r = 0; r < populationSize; r ++) {
				c += populationRankings[r];
				if (c > p2_rand) {
					p2 = population[r];
				}
			}
		}
		
		return null;
	}
	
	public interface Mutation {
		public State mutate(State s);
	}
	
	private State[] getParents(int[] population, int populationRankingsSum) {
		State[] parents = new State[2];
		int p1_rand = gen.nextInt(populationRankingsSum);
		int p2_rand = gen.nextInt(populationRankingsSum);
		int c = 0;
		for (int r = 0; r < populationSize; r ++) {
			c += populationRankings[r];
			if (c > p1_rand) {
				p1 = population[r];
			}
		}
		for (int r = 0; r < populationSize; r ++) {
			c += populationRankings[r];
			if (c > p2_rand) {
				p2 = population[r];
			}
		}
	}
	
	private Mutation mutation;
	private int populationSize;
	Random gen = new Random();

}
