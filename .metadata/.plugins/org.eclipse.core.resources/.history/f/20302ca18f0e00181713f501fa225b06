package csp_search;

import java.util.Stack;

import csp.CSP;
import csp.Domain;
import csp.Variable;
import problem.Action;
import problem.State;
import search.IResultObject;
import search.Node;
import uninformed_search.UninformedSearchResult;

public class CSPDepthSearch<X extends Variable<D,V>, D extends Domain<V>, V> implements ICSPSearch<X,D,V> {

	public IResultObject execute(CSP<X, D, V> p) {
		
		
		frontier.add(new Node(p.getInitialState(), null, null));
		while (true) {
			if (frontier.isEmpty()) return null;
			Node n = frontier.pop();
			State s = n.getState();
			if (p.isGoalState(s)) return new UninformedSearchResult(n);
			for (Action a : p.getActions()) {
				if (!a.canExecute(s)) continue;
				frontier.push(new Node(a.execute(s), n, a));
			}
		}
		
	}
	
	private IResultObject backtrack(CSP<X, D, V> p) {
		
	}



}
