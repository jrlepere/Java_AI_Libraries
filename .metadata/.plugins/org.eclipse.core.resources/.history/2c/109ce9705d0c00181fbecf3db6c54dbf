package local_search;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;

import problem.Action;
import problem.Problem;
import problem.State;
import search.IResultObject;
import search.LocalSearch;

/**
 * Implementation for the LocalBeamSearch algorithm
 * @author JLepere2
 * @date 02/07/2018
 */
public class LocalBeamSearch extends LocalSearch {

	/**
	 * Creates a LocalBeamSearch object for executing the algorithm.
	 * @param fun the objective function
	 * @param k the number of nodes to keep memory
	 */
	public LocalBeamSearch(ObjectiveFunction fun, int k) {
		super(fun);
		this.k = k;
	}
	
	public IResultObject execute(Problem p) {
		
		// -- INITIALIZE -- //
		StateCollection states = new StateCollection();
		for (int i = 0; i < k; i ++) {
			states.addState(p.getInitialState());
		}
		
		while (true) {
			PriorityQueue<State> successors = new PriorityQueue<>(new Comparator<State>() {
				public int compare(State o1, State o2) {
					return function.execute(o2) - function.execute(o1);
				}
			});
			for (State s : states.states) {
				for (Action a : p.getActions()) {
					if (!a.canExecute(s)) continue;
					
				}
			}
			
		}
		
		
		return null;
	}
	
	private class StateCollection {
		public StateCollection() {
			this.states = new LinkedList<>();
			this.bestState = null;
		}
		public void addState(State s) {
			states.add(s);
			if (bestState == null) {
				bestState = s;
			} else {
				if (function.execute(s) > function.execute(bestState)) {
					bestState = s;
				}
			}
		}
		private List<State> states;
		private State bestState;
	}
	
	private int k;

}
