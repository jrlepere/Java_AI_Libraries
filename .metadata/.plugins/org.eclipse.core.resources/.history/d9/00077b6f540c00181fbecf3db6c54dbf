import local_search.GeneticAlgorithmSearch.StateBitStreamConversion;
import problem.State;

public class NQueensStateBitStreamConverstion implements StateBitStreamConversion {

	public NQueensStateBitStreamConverstion(int n) {
		this.n = n;
	}
	
	public String getBitStream(State s) {
		int[] queenLocations = ((NQueensState) s).getQueenLocations();
		int maxBits = Integer.toBinaryString(queenLocations.length-1).length();
		String bitStream = "";
		for (int i = 0; i < queenLocations.length; i ++) {
			String bString = Integer.toBinaryString(queenLocations[i]);
			for (int e = bString.length(); e < maxBits; e ++) {
				bString = "0" + bString;
			}
			bitStream = bitStream + bString;
		}
		return bitStream;
	}

	public State convertBitStream(String s) {
		int maxBits = Integer.toBinaryString(n-1).length();
		int[] queenLocations = new int[n];
		int numIterations = s.length()/maxBits; 
		for (int i = 0; i < numIterations; i ++) {
			if (i == numIterations - 1) {
				queenLocations[i] = Integer.parseUnsignedInt(s.substring(i*maxBits), 2);
			} else {
				queenLocations[i] = Integer.parseUnsignedInt(s.substring(i*maxBits,i*maxBits+maxBits), 2);
			}
		}
		return new NQueensState(queenLocations);
	}
	
	public boolean isAcceptableBitStream(String s) {
		int maxBits = Integer.toBinaryString(n-1).length();
		int numIterations = s.length()/maxBits; 
		for (int i = 0; i < numIterations; i ++) {
			if (i == numIterations - 1) {
				if (Integer.parseUnsignedInt(s.substring(i*maxBits), 2) >= n) return false;
			} else {
				if (Integer.parseUnsignedInt(s.substring(i*maxBits,i*maxBits+maxBits), 2) >= n) return false;
			}
		}
		return true;
	}
	
	private int n;

}
