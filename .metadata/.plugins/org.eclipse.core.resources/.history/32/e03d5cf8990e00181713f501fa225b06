package csp_search;

import java.util.List;
import java.util.Stack;

import csp.CSP;
import csp.Constraint;
import csp.Domain;
import csp.Variable;
import search.IResultObject;

public class CSPDepthSearch<X extends Variable<D,V>, D extends Domain<V>, V> implements ICSPSearch<X,D,V> {

	public IResultObject execute(CSP<X, D, V> p) {
		
		Stack<List<X>> assignments = new Stack<>();
		assignments.add(p.getVariables());
		while (true) {
			if (assignments.isEmpty()) return null;
			List<X> assignment = assignments.pop();
			
		}
		
		constraints = p.getConstraints();
		return backtrack(p.getVariables());
		
	}
	
	private IResultObject backtrack(List<X> assignment) {
		if (!assignmentIsValid(assignment)) return null;
		for (X x : assignment) {
			if (!x.isAssigned()) {
				for (V v : x.getDomain().getValues()) {
					x.assign(v);
					IResultObject res = backtrack(assignment);
					if (res == null) {
						x.assign(null);
					}
				}
			}
		}
		return new CSPResultObject<>(assignment);
	}
	
	private boolean assignmentIsValid(List<X> assignment) {
		for (Constraint c : constraints) {
			if (c.isViolation()) return false;
		}
		return true;
	}
	
	private List<Constraint> constraints;



}
