package local_search;

import java.util.Random;

import problem.Problem;
import problem.State;
import search.IResultObject;
import search.LocalSearch;

public class GeneticAlgorithmSearch extends LocalSearch {

	public GeneticAlgorithmSearch(ObjectiveFunction fun, Mutation mutation, int populationSize) {
		super(fun);
		this.mutation = mutation;
		this.populationSize = populationSize;
	}

	public IResultObject execute(Problem p) {
		
		// --- INITIALIZATION --- //
		State[] population = new State[populationSize];
		int[] populationRankings = new int[populationSize];
		int populationRankingsSum = 0;
		for (int i = 0; i < populationSize; i ++) {
			population[i] = p.getInitialState();
			int rank = function.execute(population[i]);
			populationRankings[i] = rank;
			populationRankingsSum += rank;
		}
		
		State[] newPopulation = new State[populationSize];
		for (int i = 0; i < populationSize/2; i ++) {
			State[] parents = getParents(population, populationRankings, populationRankingsSum);
		}
		if (populationSize % 2 == 1) {
			
		}
		
		return null;
	}
	
	public interface Mutation {
		public String getBitStream(State s);
		public State convertBitStream(String s);
	}
	
	private State getParent(State[] population, int[] populationRankings, int populationRankingsSum) {
		
		// -- GET FIRST PARENT - //
		int p1_rand = gen.nextInt(populationRankingsSum);
		int c = 0;
		for (int i = 0; i < populationSize; i ++) {
			c += populationRankings[i];
			if (c > p1_rand) {
				return population[i];
			}
		}
		
		return null;
	}
	
	private Mutation mutation;
	private int populationSize;
	Random gen = new Random();

}
